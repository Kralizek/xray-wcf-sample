//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XRaySample.NotificationEngine
{
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AbsenceReason", Namespace="http://schemas.datacontract.org/2004/07/EMG.NotificationEngine")]
    public enum AbsenceReason : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sick = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CareOfChild = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="XRaySample.NotificationEngine.INotificationEngine")]
    public interface INotificationEngine
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationEngine/NotifyAbsence", ReplyAction="http://tempuri.org/INotificationEngine/NotifyAbsenceResponse")]
        System.Threading.Tasks.Task NotifyAbsenceAsync(string employee, XRaySample.NotificationEngine.AbsenceReason reason);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public interface INotificationEngineChannel : XRaySample.NotificationEngine.INotificationEngine, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public partial class NotificationEngineClient : System.ServiceModel.ClientBase<XRaySample.NotificationEngine.INotificationEngine>, XRaySample.NotificationEngine.INotificationEngine
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public NotificationEngineClient() : 
                base(NotificationEngineClient.GetDefaultBinding(), NotificationEngineClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_INotificationEngine.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NotificationEngineClient(EndpointConfiguration endpointConfiguration) : 
                base(NotificationEngineClient.GetBindingForEndpoint(endpointConfiguration), NotificationEngineClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NotificationEngineClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(NotificationEngineClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NotificationEngineClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(NotificationEngineClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public NotificationEngineClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task NotifyAbsenceAsync(string employee, XRaySample.NotificationEngine.AbsenceReason reason)
        {
            return base.Channel.NotifyAbsenceAsync(employee, reason);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_INotificationEngine))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.SecurityMode.None;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_INotificationEngine))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://localtest.me:10003/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return NotificationEngineClient.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_INotificationEngine);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return NotificationEngineClient.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_INotificationEngine);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_INotificationEngine,
        }
    }
}
